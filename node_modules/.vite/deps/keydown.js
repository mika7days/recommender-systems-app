import {
  __commonJS
} from "./chunk-UXIASGQL.js";

// browser-external:events
var require_events = __commonJS({
  "browser-external:events"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "events" has been externalized for browser compatibility. Cannot access "events.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/vkey/index.js
var require_vkey = __commonJS({
  "node_modules/vkey/index.js"(exports, module) {
    var ua = typeof window !== "undefined" ? window.navigator.userAgent : "";
    var isOSX = /OS X/.test(ua);
    var isOpera = /Opera/.test(ua);
    var maybeFirefox = !/like Gecko/.test(ua) && !isOpera;
    var i;
    var output = module.exports = {
      0: isOSX ? "<menu>" : "<UNK>",
      1: "<mouse 1>",
      2: "<mouse 2>",
      3: "<break>",
      4: "<mouse 3>",
      5: "<mouse 4>",
      6: "<mouse 5>",
      8: "<backspace>",
      9: "<tab>",
      12: "<clear>",
      13: "<enter>",
      16: "<shift>",
      17: "<control>",
      18: "<alt>",
      19: "<pause>",
      20: "<caps-lock>",
      21: "<ime-hangul>",
      23: "<ime-junja>",
      24: "<ime-final>",
      25: "<ime-kanji>",
      27: "<escape>",
      28: "<ime-convert>",
      29: "<ime-nonconvert>",
      30: "<ime-accept>",
      31: "<ime-mode-change>",
      27: "<escape>",
      32: "<space>",
      33: "<page-up>",
      34: "<page-down>",
      35: "<end>",
      36: "<home>",
      37: "<left>",
      38: "<up>",
      39: "<right>",
      40: "<down>",
      41: "<select>",
      42: "<print>",
      43: "<execute>",
      44: "<snapshot>",
      45: "<insert>",
      46: "<delete>",
      47: "<help>",
      91: "<meta>",
      92: "<meta>",
      93: isOSX ? "<meta>" : "<menu>",
      95: "<sleep>",
      106: "<num-*>",
      107: "<num-+>",
      108: "<num-enter>",
      109: "<num-->",
      110: "<num-.>",
      111: "<num-/>",
      144: "<num-lock>",
      145: "<scroll-lock>",
      160: "<shift-left>",
      161: "<shift-right>",
      162: "<control-left>",
      163: "<control-right>",
      164: "<alt-left>",
      165: "<alt-right>",
      166: "<browser-back>",
      167: "<browser-forward>",
      168: "<browser-refresh>",
      169: "<browser-stop>",
      170: "<browser-search>",
      171: "<browser-favorites>",
      172: "<browser-home>",
      173: isOSX && maybeFirefox ? "-" : "<volume-mute>",
      174: "<volume-down>",
      175: "<volume-up>",
      176: "<next-track>",
      177: "<prev-track>",
      178: "<stop>",
      179: "<play-pause>",
      180: "<launch-mail>",
      181: "<launch-media-select>",
      182: "<launch-app 1>",
      183: "<launch-app 2>",
      186: ";",
      187: "=",
      188: ",",
      189: "-",
      190: ".",
      191: "/",
      192: "`",
      219: "[",
      220: "\\",
      221: "]",
      222: "'",
      223: "<meta>",
      224: "<meta>",
      226: "<alt-gr>",
      229: "<ime-process>",
      231: isOpera ? "`" : "<unicode>",
      246: "<attention>",
      247: "<crsel>",
      248: "<exsel>",
      249: "<erase-eof>",
      250: "<play>",
      251: "<zoom>",
      252: "<no-name>",
      253: "<pa-1>",
      254: "<clear>"
    };
    for (i = 58; i < 65; ++i) {
      output[i] = String.fromCharCode(i);
    }
    for (i = 48; i < 58; ++i) {
      output[i] = i - 48 + "";
    }
    for (i = 65; i < 91; ++i) {
      output[i] = String.fromCharCode(i);
    }
    for (i = 96; i < 106; ++i) {
      output[i] = "<num-" + (i - 96) + ">";
    }
    for (i = 112; i < 136; ++i) {
      output[i] = "F" + (i - 111);
    }
  }
});

// node_modules/keydown/index.js
var require_keydown = __commonJS({
  "node_modules/keydown/index.js"(exports, module) {
    var Emitter = require_events().EventEmitter;
    var vkey = require_vkey();
    module.exports = function(keys, el) {
      if (typeof keys === "string")
        keys = [keys];
      if (!el)
        el = window;
      var emitter = new Emitter();
      emitter.pressed = {};
      el.addEventListener("blur", clearPressed);
      el.addEventListener("focus", clearPressed);
      el.addEventListener("keydown", function(ev) {
        var key = vkey[ev.keyCode];
        emitter.pressed[key] = true;
        var allPressed = true;
        keys.forEach(function(k) {
          if (!emitter.pressed[k])
            allPressed = false;
        });
        if (allPressed) {
          emitter.emit("pressed", emitter.pressed);
          clearPressed();
        }
      });
      el.addEventListener("keyup", function(ev) {
        delete emitter.pressed[vkey[ev.keyCode]];
      });
      function clearPressed() {
        emitter.pressed = {};
      }
      return emitter;
    };
  }
});
export default require_keydown();
//# sourceMappingURL=keydown.js.map
